

Reviewer #1: This article is focused on the very real problem of software and hardware
design reuse in robotics in general and humanoid robotics in particular. The
authors describe in a fairly detailed manner a distributed software
architecture for robot control called YARP designed and licensed to facilitate
code reuse across projects in the way of Open Source development. 

 * [reviewer is summarizing software part]

In addition, the authors give an overview of their attempt to design and
manufacture hardware in a manner similar to the Open Source development
methodology for software. They describe how they did so, and where the process
is currently not working satisfactorily (there are notably a lack of open
tools for hardware design, and the actual hardware realization needs
conventional manufacturing). The hardware development as described is in an
early developmental phase with (as far as the paper describes it) still few
results in the form of a complete, integrated system.

 * [reviewer is summarizing hardware part]

The strength of this paper is that it brings up a problem common to much
applied science, that of reuse of experimental resources that are expensive in
time or funds to create, and shows how one way of handling this can work in
practice. They are effectively not only sharing the code and the hardware
design; they are sharing the idea of sharing such resources in a way that can
make it usable for other researchers in the field. I can not stress enough
how important this is.

 * Agreed.

So I find it rather puzzling why the authors have gone ahead to build their
own framework at all. They argue convincingly for the need to work in an open
environment and let people build on each others' work rather than reinvent the
wheel as it where, but they have chosen to build their own software
architecture (YARP) rather than extend the work on an equally open, already
existing architecture (Player) with an active developer base. 

 * Short answer: Player and YARP both evolved at around the same time,
 entirely independently.

 * Longer answer: YARP and Player are as interoperable as anyone so
 far has needed them to be.  Section 2.3 (Interoperating) attempted to
 argue this.

 * The free software ecology contains many cases of long term side-by-side
 projects with somewhat different cultures and goals.  For example, Linux
 and BSD, Gnome and KDE, etc.  Unlike proprietary software, this is not
 such a bad thing, since the software "genes" flow back and forth if 
 source-code licenses are compatible.

 * We believe we have some important technical advantages over Player,
 and there are currently some important cultural differences.  Developers
 are free to pick and choose what they like.


They acknowledge
the similarity of the projects but give little reason why a separate project
is preferable to building on an existing one. There are of course any number
of robotics system projects like this, but most of them are only for internal
use (like DVC at ATR in Kyoto) or are open but have a somewhat different focus
from the real-time control of hardware (like Ikaros at Lund University). As
the authors acknowledge, Player is different in that it occupies almost
exactly the same niche as YARP, both from a problem domain and methodological
perspective. 

 * Again, the history is that Player did not exist as a open-source project
 when YARP started, or vice versa.

 * In fact the niches are distinct: humanoid robots versus mobile robots.
 The first few versions of either YARP or Player would have been useless
 in the other's domain.  Only after YARP underwent a complete redesign
 to YARP2 and Player to Player 2.0 are they becoming truly comparable.


I would suggest that giving a fuller motivation of why a separate project is
overall better for the community than building on Player would be the most
significant addition needed for this paper. And considering the focus on open
development throughout, a more detailed discussion on this choice -
effectively outlining the limits of cooperative development - would be as
instructive for researchers considering an open approach as the arguments in
favour of cooperation. As the authors have practical experience on this I
believe a discussion on this would be a most significant addition to the
discussion.

The discussion of the framework itself does sometimes veer into a perhaps too
detailed look at the practical mechanisms. As the take-home message here is
all about long-lived reusable systems certainly encapsulation of hardware and
similar issues are important. But details like command parameters, method
parameters and particularly the detailed specification of message packets and
communication protocols are perhaps better left for a user manual rather than
an overview like this.

 * Acknowledged (should work on this)

The hardware section is shorter and less detailed; in part that is undoubtedly
because that area seems to be less further along than the software, but also,
of course, since the area is more complex and less amenable to a short
treatment. In many ways, though, the hardware section feels better organized,
with the technical descriptions at a level that doesn't obscure the central
message about the development methodology. I would perhaps have wanted to see
a mention of the existence of other open source hardware (there
are numerous, from the SPARC processor design released by Sun, to single-board
computers, to software radio designs - and even, if stretching things a bit,
to open beer and Cola recipes). An acknowledgment of the possible issues
around applying a license like GPL, meant for software, onto other forms of
expression like CAD files (and by extension the hardware built from them)
would also be welcome.

 * We should expand the hardware section quite a bit, I think there's a lot
 more to say.


